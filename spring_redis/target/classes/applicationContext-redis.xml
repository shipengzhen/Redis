<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd 
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd 
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

	<!--扫描注解 -->

	<!-- 配置读取外部配置文件 -->
	<context:property-placeholder location="classpath:redis.properties" />

	<!-- redis连接池 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 最大空闲连接数  -->
		<property name="maxIdle" value="${redis.maxIdle}" />
		<!-- 最大连接数  -->
		<property name="maxTotal" value="${redis.maxTotal}" />
		<!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1,(永不超时)  -->
		<property name="maxWaitMillis" value="${redis.maxWaitMillis}" />
		<!-- 在获取连接的时候检查有效性, 默认false  -->
		<!-- <property name="testOnBorrow" value="${redis.testOnBorrow}" /> -->
		<!-- 每次释放连接的最大数目  -->
		<property name="numTestsPerEvictionRun" value="1024"></property>
		<!-- 释放连接的扫描间隔（毫秒）  -->
		<property name="timeBetweenEvictionRunsMillis" value="30000"></property>
		<!-- 连接最小空闲时间  -->
		<property name="minEvictableIdleTimeMillis" value="1800000"></property>
		<!-- 连接空闲多久后释放, 当空闲时间>该值 且 空闲连接>最大空闲连接数 时直接释放 -->
		<property name="softMinEvictableIdleTimeMillis" value="10000"></property>
		<!-- 在空闲时检查有效性, 默认false  -->
		<property name="testWhileIdle" value="true" />
		<!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true -->
		<property name="blockWhenExhausted" value="false" />
	</bean>

	<!-- redis方式 -->
	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host}"></property>
		<property name="port" value="${redis.port}"></property>
		<!-- <property name="password" value="${redis.pass}"></property> -->
		<property name="poolConfig" ref="poolConfig"></property>
	</bean>

	<!-- redis template definition p表示对该bean里面的属性进行注入，格式为p:属性名=注入的对象 效果与在bean里面使用<property>标签一样 -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
		p:connection-factory-ref="jedisConnectionFactory">
		<!-- <property name="connectionFactory" ref="jedisConnectionFactory" /> -->
		<!-- 序列化方式 建议key/hashKey采用StringRedisSerializer。 -->
		<property name="keySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="hashKeySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<property name="valueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
		<property name="hashValueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
	</bean>

	<!-- 对string操作的封装 -->
	<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"
		p:connection-factory-ref="jedisConnectionFactory">
		<!-- <property name="connectionFactory" ref="jedisConnectionFactory" /> -->
	</bean>


	<!-- jedis方式1 -->
	<!--单机版 -->
	<bean id="jedisShardInfo1" class="redis.clients.jedis.JedisShardInfo">
		<!-- ip地址 -->
		<constructor-arg name="host" value="${redis.host}"></constructor-arg>
		<!-- 端口号 -->
		<constructor-arg name="port" value="${redis.port}"></constructor-arg>
		<!-- 密码 -->
		<property name="password" value="${redis.pass}"></property>
	</bean>

	<!-- 集合版 -->
	<bean name="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool">
		<constructor-arg name="poolConfig" ref="poolConfig"></constructor-arg>
		<constructor-arg name="shards">
			<set>
				<ref bean="jedisShardInfo1" />
			</set>
		</constructor-arg>
	</bean>

	<!-- jedis方式2 -->
	<!--单机版 -->
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg name="poolConfig" ref="poolConfig"></constructor-arg>
		<constructor-arg name="host" value="${redis.host}"></constructor-arg>
		<constructor-arg name="port" value="${redis.port}"></constructor-arg>
		<constructor-arg name="timeout" value="1000"></constructor-arg>
		<constructor-arg name="password" value="${redis.pass}"></constructor-arg>
	</bean>

	<!--集群版 -->
	<bean id="hostAndPort1" class="redis.clients.jedis.HostAndPort">
		<constructor-arg name="host" value="${redis.cluster.host1}"></constructor-arg>
		<constructor-arg name="port" value="${redis.cluster.port1}"></constructor-arg>
	</bean>
	<bean id="hostAndPort2" class="redis.clients.jedis.HostAndPort">
		<constructor-arg name="host" value="${redis.cluster.host2}"></constructor-arg>
		<constructor-arg name="port" value="${redis.cluster.port2}"></constructor-arg>
	</bean>
	<bean id="hostAndPort3" class="redis.clients.jedis.HostAndPort">
		<constructor-arg name="host" value="${redis.cluster.host3}"></constructor-arg>
		<constructor-arg name="port" value="${redis.cluster.port3}"></constructor-arg>
	</bean>
	<bean id="hostAndPort4" class="redis.clients.jedis.HostAndPort">
		<constructor-arg name="host" value="${redis.cluster.host4}"></constructor-arg>
		<constructor-arg name="port" value="${redis.cluster.port4}"></constructor-arg>
	</bean>
	<bean id="hostAndPort5" class="redis.clients.jedis.HostAndPort">
		<constructor-arg name="host" value="${redis.cluster.host5}"></constructor-arg>
		<constructor-arg name="port" value="${redis.cluster.port5}"></constructor-arg>
	</bean>
	<bean id="hostAndPort6" class="redis.clients.jedis.HostAndPort">
		<constructor-arg name="host" value="${redis.cluster.host6}"></constructor-arg>
		<constructor-arg name="port" value="${redis.cluster.port6}"></constructor-arg>
	</bean>

	<!-- <bean id="jedisCluster" class="redis.clients.jedis.JedisCluster"> <constructor-arg 
		name="jedisClusterNode"> <set> <ref bean="hostAndPort1" /> <ref bean="hostAndPort2" 
		/> <ref bean="hostAndPort3" /> <ref bean="hostAndPort4" /> <ref bean="hostAndPort5" 
		/> <ref bean="hostAndPort6" /> </set> </constructor-arg> 设置连接超时时间 <constructor-arg 
		name="connectionTimeout" value="10"></constructor-arg> 设置网络通信超时时间 <constructor-arg 
		name="soTimeout" value="1000"></constructor-arg> 设置最大重试次数 <constructor-arg 
		name="maxAttempts" value="10"></constructor-arg> 设置集群访问密码 <constructor-arg 
		name="password" value="${redis.pass}"></constructor-arg> 设置jedisPool配置 <constructor-arg 
		name="poolConfig" ref="poolConfig"></constructor-arg> </bean> -->
</beans>